package com.mycompany.subscriber.presentacion;


import com.mycompany.subscriber.domain.Product;
import com.mycompany.subscriber.domain.service.ServiceModel;
import com.mycompany.subscriber.infra.ISubscriber;
import com.mycompany.subscriber.infra.Observer;
import com.mycompany.subscriber.infra.RabbitMQSubscriber;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 * Es un observador
 *
 * @author ahurtado
 */
public class GUIListProductViewController extends javax.swing.JFrame implements Observer, ISubscriber{

    ServiceModel service;
    JTable table;
    DefaultTableModel model;

    /**
     * Creates new form GUIListadoProductos
     *
     * @param service servicio
     */
    public GUIListProductViewController(ServiceModel service) {
        initComponents();
        this.service = service;
        this.model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Name");
        model.addColumn("Price");
        table = new JTable(model);
        jPanel2.add(new JScrollPane(table));
        setSize(500, 200);
        setLocation(10,50);
        service.addObserver(this);
        new Thread(new RabbitMQSubscriber(this)).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnCerrar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Listado de Productos");
        getContentPane().add(jLabel1, java.awt.BorderLayout.PAGE_START);

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCerrar);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);
        getContentPane().add(jPanel2, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_btnCerrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Object o) {
        this.setVisible(true);
        model.setRowCount(0);
        for (Product p : service.listProducts()) {
            model.addRow(new Object[]{"" + p.getProductId(), p.getName(), p.getPrice()});
        }
        table.paintImmediately(table.getBounds());
    }
    
      @Override
    public void onMessage(String msg) {
        try {
            service.gestionarGson(msg);
        } catch (InterruptedException ex) {
            Logger.getLogger(GUIListProductViewController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
